<#@ include file="MyT4Utilities.tt" #><#@ import namespace="System.Diagnostics.Eventing.Reader" #>
<#+
    List<ColumnData> BuildColumnList(string objectName)
    {
        var connectionString =
            "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ECSMemberManager;Integrated Security=True;Connect Timeout=30";

        string columnquery = BuildColumnQueryString(objectName);

        List<ColumnData> columnList = new List<ColumnData>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand(columnquery, connection);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();

            columnList = GetColumnData(reader);
        }

        return columnList;
    }
#>

<#+
  // Insert any template procedures here
    void BuildCSLAProperties(ColumnData columnData,string stereoType)
    {
        if(columnData.isForeignKey)
        {
            var newOutputName = ConvertForeignKeyColumn(columnData.columnName);
            var objType = newOutputName.Replace(".Id", string.Empty);
#>
        public static readonly PropertyInfo<<#= objType #><#= stereoType #>> <#= objType #>Property = RegisterProperty<<#= objType #><#= stereoType#>>(o => o.<#= objType #>);
        public <#= objType #>EC <#= objType  #> 
        {
            get => GetProperty(<#= objType #>Property); 
            set => SetProperty(<#= objType  #>Property, value); 
        }        

<#+
        } // end if 
        else
        { 
#>
        public static readonly PropertyInfo<<#= columnData.dotNetType #>> <#= columnData.columnName #>Property = RegisterProperty<<#= columnData.dotNetType	 #>>(o => o.<#= columnData.columnName #>);
        public virtual <#= columnData.dotNetType #> <#= columnData.columnName #> 
        {
            get => GetProperty(<#= columnData.columnName #>Property); 
<#+
            if (columnData.isPrimaryKey)
            { 
#>
            private set => LoadProperty(<#= columnData.columnName #>Property, value); 
<#+                
            }
            else
            {
#>
            set => SetProperty(<#= columnData.columnName #>Property, value); 
<#+                
            }
#>   
        }        
<#+
        }  // end else
    }
#>

<#+
    void BuildFetchDataAccessProperties(ColumnData columnData,string stereoType)
    {
        if (columnData.isForeignKey)
        {
            var objName = columnData.columnName.Replace("Id", string.Empty);
#>
                <#= objName #> = (data.<#=objName #> != null ? await <#= objName #><#=stereoType#>.Get<#= objName #><#=stereoType#>(data.<#= objName #>) : null);
<#+
        }
        else
        {
#>
                <#= columnData.columnName #> = data.<#= columnData.columnName #>;
<#+
        }
    }
#>

<#+
    void BuildInsertUpdateDataAccessProperties(ColumnData columnData,string stereoType)
    {
        if (columnData.isForeignKey)
        {
            var objName = columnData.columnName.Replace("Id", string.Empty);
#>
                <#= objName #> = (<#= objName #> != null ? new <#= objName #>() { Id = <#= objName #>.Id } : null),
<#+
        }
        else
        {
#>
                <#= columnData.columnName #> = <#= columnData.columnName #>,
<#+
        }
    }
#>

<#+
    void BuildFactoryMethods(string objectName, string stereoType, bool childStereo)
    {
        var childDesig = childStereo ? "Child" : string.Empty; 
#>    

        public static async Task<<#= objectName #><#= stereoType #>> New<#= objectName #><#= stereoType #>()
        {
            return await DataPortal.Create<#=childDesig #>Async<<#= objectName #><#= stereoType #>>();
        }
<#+
        if (childStereo)
        {
 #>
        public static async Task<<#= objectName #><#= stereoType #>> Get<#= objectName #><#= stereoType #>(<#=objectName#> childData)
        {
            return await DataPortal.Fetch<#=childDesig #>Async<<#= objectName #><#= stereoType #>>(childData);
        }  
<#+
        }
        else
        {
#>
        public static async Task<<#= objectName #><#= stereoType #>> Get<#= objectName #><#=stereoType#>(int id)
        {
            return await DataPortal.Fetch<#=childDesig #>Async<<#= objectName #><#= stereoType #>>(id);
        } 

        public static async Task Delete<#= objectName #><#= stereoType #>(int id)
        {
            await DataPortal.Delete<#=childDesig #>Async<<#= objectName #><#= stereoType #>>(id);
        } 
<#+            
        }
    
    }
#>
<#+
    void BuildDeleteMethods(string objectType)
    {
#>
       
        [DeleteSelfChild]
        private async Task DeleteSelf()
        {
            await Delete(Id);
        }
       
        [Delete]
        private async Task Delete(int id)
        {
            using var dalManager = DalFactory.GetManager();
            var dal = dalManager.GetProvider<I<#= objectType #>Dal>();
           
            await dal.Delete(id);
        }
<#+
    }
#>

<#+
    void BuildFetch(List<ColumnData> columnList,string objectType, string stereoType, bool isChild)
    {
        var childDesig = isChild ? "Child" : String.Empty;
        #>
        [Fetch<#=childDesig #>]
<#+
        if (isChild)
        {
#>
        private async Task Fetch(<#= objectType #> data)
        {
<#+
        }
        else
        {
#>
        private async Task Fetch(int id)
        {
            using var dalManager = DalFactory.GetManager();
            var dal = dalManager.GetProvider<I<#= objectType #>Dal>();
            var data = await dal.Fetch(id);

<#+
        }
#>
            using (BypassPropertyChecks)
            {
<#+    
    foreach (var columnData in columnList)
    {
        BuildFetchDataAccessProperties(columnData,stereoType);
    }
#>
            }
        }
<#+      
    }
#>

<#+
    void BuildInsert(List<ColumnData> columnList, string objectType, string stereoType, bool isChild )
    {
        var childDesig = isChild ? "Child" : String.Empty;
#>
        [Insert<#=childDesig #>]
        private async Task Insert()
        {
            using var dalManager = DalFactory.GetManager();
            var dal = dalManager.GetProvider<I<#= objectType #>Dal>();
            var data = new <#= objectType #>()
            {

<#+
    foreach (var columnData in columnList)
    {
        BuildInsertUpdateDataAccessProperties(columnData,stereoType);
    }
#>
            };

            var insertedObj = await dal.Insert(data);
            Id = insertedObj.Id;
            RowVersion = insertedObj.RowVersion;
        }
 <#+      
    }
#>

<#+
    void BuildUpdate(List<ColumnData> columnList, string objectType, string stereoType, bool isChild )
    { 
        var childDesig = isChild ? "Child" : String.Empty;
#>
        [Update<#=childDesig #>]
        private async Task Update()
        {
            using var dalManager = DalFactory.GetManager();
            var dal = dalManager.GetProvider<I<#= objectType #>Dal>();
            var data = new <#= objectType #>()
            {

<#+
    foreach (var columnData in columnList)
    {
        BuildInsertUpdateDataAccessProperties(columnData,stereoType);
    }
#>
            };

            var insertedObj = await dal.Insert(data);
            Id = insertedObj.Id;
            RowVersion = insertedObj.RowVersion;
        }
 <#+      
    }
#>
