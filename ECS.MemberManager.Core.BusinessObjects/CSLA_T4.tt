<#@ include file="MyT4Utilities.tt" #><#@ import namespace="System.Diagnostics.Eventing.Reader" #>
<#+
    List<ColumnData> BuildColumnList(string objectName)
    {
        var connectionString =
            "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ECSMemberManager;Integrated Security=True;Connect Timeout=30";

        string columnquery = BuildColumnQueryString(objectName);

        List<ColumnData> columnList = new List<ColumnData>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand(columnquery, connection);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();

            columnList = GetColumnData(reader);
        }

        return columnList;
    }
#>

<#+
  // Insert any template procedures here
    void BuildCSLAProperties(ColumnData columnData, string stereoType, bool isReadOnly )
    {
        var childStereoType = GetChildStereoType(stereoType);
        if(columnData.isForeignKey)
        {
            var newOutputName = ConvertForeignKeyColumn(columnData.columnName);
            var objType = newOutputName.Replace(".Id", string.Empty);
#>

        public static readonly PropertyInfo<<#= objType #><#= childStereoType#>> <#= objType #>Property = RegisterProperty<<#= objType #><#= childStereoType#>>(o => o.<#= objType #>);
        public <#= objType #><#= childStereoType #> <#= objType #>  
        {
            get => GetProperty(<#= objType #>Property); 
<#+
        if(isReadOnly)
        {
#>        
            private set => LoadProperty(<#= objType  #>Property, value); 
<#+
        }
        else
        {
#>
            set => SetProperty(<#= objType  #>Property, value); 
<#+
        }
#>
        }    
 
<#+
        } // end if 
        else
        { 
#>
        public static readonly PropertyInfo<<#= columnData.dotNetType #>> <#= columnData.columnName #>Property = RegisterProperty<<#= columnData.dotNetType	 #>>(o => o.<#= columnData.columnName #>);
        public virtual <#= columnData.dotNetType #> <#= columnData.columnName #> 
        {
            get => GetProperty(<#= columnData.columnName #>Property); 
<#+
            if (columnData.isPrimaryKey || isReadOnly)
            { 
#>
            private set => LoadProperty(<#= columnData.columnName #>Property, value); <#+                
            }
            else
            {
#>
            set => SetProperty(<#= columnData.columnName #>Property, value); 
<#+                
            }#>   
        }

<#+
        }  // end else
    }
#>

<#+
    void BuildFactoryMethods(string objectName, string stereoType, bool isChild, bool isReadOnly )
    {
        var childDesig = (isChild ? "Child" : String.Empty);
        var visibility = (isChild ? "internal" : "public");
        var childDataString = (isChild ? "childData" : "id");
        var childParams = (isChild ? objectName+" "  + childDataString : "int id"); 
        
        if (!isReadOnly)
        {
#>
        <#= visibility #> static async Task<<#= objectName #><#= stereoType #>> New<#= objectName #><#= stereoType #>()
        {
            return await DataPortal.Create<#= childDesig #>Async<<#= objectName #><#= stereoType #>>();
        }

<#+            
        }
#>
        <#= visibility #> static async Task<<#= objectName #><#= stereoType #>> Get<#= objectName #><#= stereoType #>(<#=childParams #>)
        {
            return await DataPortal.Fetch<#= childDesig #>Async<<#= objectName #><#= stereoType #>>(<#=childDataString #>);
        }  

<#+
        if (!isReadOnly && !isChild )
        {
#>
        public static async Task Delete<#= objectName #><#= stereoType #>(int id)
        {
            await DataPortal.DeleteAsync<<#= objectName #><#= stereoType #>>(id);
        } 

<#+
        }
    
    }
#>

<#+
    void BuildFetch(List<ColumnData> columnList,string objectType, string stereoType, bool isChild, bool isReadOnly )
    {
        var visibility = (isChild ? "internal" : "public");
        var childDesig = (isChild ? "Child" : string.Empty);
        var childParam = (isChild ? "childData" : string.Empty);
        var childList = (isChild ? "List<" + objectType + ">" : string.Empty);
        
#>
        [Fetch<#=childDesig #>]
<#+
        if (isChild)
        {
#>
        private async Task Fetch(<#= objectType #> data)
        {
<#+
        }
        else
        {
#>
        private async Task Fetch(int id, [Inject] I<#=objectType #>Dal dal)
        {
            var data = await dal.Fetch(id);

<#+
        }
        if (!isReadOnly)
        {
#>
            using(BypassPropertyChecks)
            {
<#+                
        }

        foreach (var columnData in columnList)
        {
            BuildFetchDataAccessProperties(columnData,stereoType);
        }

        if (!isReadOnly)
        {
#>
            }            
<#+                
        }
#>
        }
<#+      
    }
#>

<#+
    void BuildInsert(List<ColumnData> columnList, string objectType, string stereoType, bool isChild )
    {
        var childDesig = isChild ? "Child" : String.Empty;
#>
        [Insert<#=childDesig #>]
        private async Task Insert([Inject] I<#=objectType #>Dal dal)
        {
            var data = new <#= objectType #>()
            {

<#+
    foreach (var columnData in columnList)
    {
        BuildInsertUpdateDataAccessProperties(columnData);
    }
#>
            };

            var insertedObj = await dal.Insert(data);
            Id = insertedObj.Id;
            RowVersion = insertedObj.RowVersion;
        }

<#+      
    }
#>

<#+
    void BuildListFetch(string objectName, bool isChild, string childStereo)
    {
        if (!isChild)
        {
#>
        [Fetch]
        private async Task Fetch([Inject] I<#=objectName #>Dal dal)
        {
            var childData = await dal.Fetch();
<#+
        }
        else
        {
#>
        [FetchChild]
        private async Task Fetch(List<<#= objectName #>> childData)
        {
<#+
        }
#>

            using (LoadListMode)
            {
                foreach (var domainObjToAdd in childData)
                {
                    var objectToAdd = await <#= objectName #><#= childStereo #>.Get<#= objectName #><#= childStereo #>(domainObjToAdd);
                    Add(objectToAdd);
                }
            }
        }
<#+
    }
#>

<#+
    void BuildUpdate(List<ColumnData> columnList, string objectType, string stereoType, bool isChild )
    { 
        var childDesig = isChild ? "Child" : String.Empty;
        
#>
       [Update<#=childDesig #>]
        private async Task Update([Inject] I<#=objectType#>Dal dal)
        {
            var data = new <#= objectType #>()
            {

<#+
    foreach (var columnData in columnList)
    {
        BuildInsertUpdateDataAccessProperties(columnData);
    }
#>
            };

            var insertedObj = await dal.Update(data);
            RowVersion = insertedObj.RowVersion;
        }

<#+      
    }
#>

<#+
    void BuildDeleteMethods(string objectType, bool isChild)
    {
#>
<#+     if(isChild)
        {  
#>       
        [DeleteSelfChild]
<#+
        }
else
{
#>
        [DeleteSelf]
<#+
}
#>
        private async Task DeleteSelf([Inject] I<#=objectType#>Dal dal)
        {
            await Delete(Id,dal);
        }
       
        [Delete]
        private async Task Delete(int id, [Inject] I<#=objectType#>Dal dal)
        {
            await dal.Delete(id);
        }
<#+
    }
#>

<#+
    void BuildFetchDataAccessProperties(ColumnData columnData, string stereoType )
    {
        if (columnData.isForeignKey)
        {
            var objName = columnData.columnName.Replace("Id", string.Empty);
            var childStereoType =  GetChildStereoType(stereoType);
#>
            <#= objName #> = (data.<#=objName #> != null ? await <#= objName #><#=childStereoType#>.Get<#= objName #><#=childStereoType#>(data.<#= objName #>) : null);
<#+
        }
        else
        {
#>
            <#= columnData.columnName #> = data.<#= columnData.columnName #>;
<#+
        }
    }
#>

<#+
    void BuildInsertUpdateDataAccessProperties(ColumnData columnData)
    {
        if (columnData.isForeignKey)
        {
            var objName = columnData.columnName.Replace("Id", string.Empty);
#>
                <#= objName #> = (<#= objName #> != null ? new <#= objName #>() { Id = <#= objName #>.Id } : null),
<#+
        }
        else
        {
#>
                <#= columnData.columnName #> = <#= columnData.columnName #>,
<#+
        }
    }
#>

<#+
    string GetChildStereoType(string stereoType)
    {
        switch (stereoType)
        {
            case "ER" :
            case "EC":
            case "ECL":
            case "ERL":
                return "EC";
            case "ROR":
            case "ROC":
            case "RORL":
            case "ROCL":
                return "ROC";
            default:
                return string.Empty;
        }
    }
#>

<#+
    void BuildListFactoryMethods(string objectName, string stereo, bool isChild, bool isReadOnly)
    {
        var visibility = (isChild ? "internal" : "public");
        var childDesig = (isChild ? "Child" : string.Empty);
        var childParam = (isChild ? "childData" : string.Empty);
        var childList = (isChild ? "List<" + objectName + ">" : string.Empty);
        
if(!isReadOnly)
    {
#>
        <#=visibility #> static async Task<<#=objectName #><#=stereo #>> New<#=objectName#><#=stereo #>()
        {
            return await DataPortal.Create<#=childDesig#>Async<<#=objectName #><#=stereo #>>();
        }
<#+
    }
#>

        <#=visibility #> static async Task<<#=objectName #><#=stereo #>> Get<#=objectName#><#=stereo #>(<#=childList #> <#=childParam#>)
        {
            return await DataPortal.Fetch<#=childDesig#>Async<<#=objectName #><#=stereo #>>(<#=childParam#>);
        }
<#+
    }
#>

<#+
    void CreateBuildHeader()
    { 
 #>
//******************************************************************************
// This file has been generated via text template.
// Do not make changes as they will be automatically overwritten.
//
// Generated on <#= DateTime.Now #>
//******************************************************************************    
<#+
    }
#>


